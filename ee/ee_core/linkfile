ENTRY(_start);

MEMORY {
	/* Main layout of PS2 EE memory */
	bios_rom   : ORIGIN = 0x00000000, LENGTH = 512K  /* The ROM overlaps with 512K of RAM. This RAM is used by the BIOS. */
	bios_ram   : ORIGIN = 0x00080000, LENGTH = 512K  /* Used for BIOS updates, but mostly not used */
	game_ram   : ORIGIN = 0x00100000, LENGTH =  31M
	scratchpad : ORIGIN = 0x70000000, LENGTH =  16K

	/* BIOS RAM memory layout */
	bios_ram80 : ORIGIN = 0x00080000, LENGTH =   8K  /* Used: old idle thread and alarm dispatcher */
	bios_ram82 : ORIGIN = 0x00082000, LENGTH =   8K  /* Used: new idle thread and alarm dispatcher or EELOAD */
	bios_ram84 : ORIGIN = 0x00084000, LENGTH = 304K  /* Free - is this always true? */
	bios_ramD0 : ORIGIN = 0x000D0000, LENGTH = 192K  /* Free for most games - what games? */

	/* EE_CORE memory layout, currently only using bios_ram84 area */
	ee_core    : ORIGIN = 0x00084000, LENGTH =  72K
	stack      : ORIGIN = 0x00096000, LENGTH =   4K
	modules    : ORIGIN = 0x00097000, LENGTH = 228K
}

REGION_ALIAS("MAIN_REGION", ee_core);

PHDRS {
  text PT_LOAD;
}

SECTIONS {
	.text : {
		_ftext = . ;
		*(.text)
		*(.text.*)
		*(.gnu.linkonce.t*)
		KEEP(*(.init))
		KEEP(*(.fini))
		QUAD(0)
	} >MAIN_REGION :text

	PROVIDE(_etext = .);
	PROVIDE(etext = .);

	.reginfo : { *(.reginfo) } >MAIN_REGION

	/* Global/static constructors and deconstructors. */
	.ctors ALIGN(16): {
		KEEP(*crtbegin*.o(.ctors))
		KEEP(*(EXCLUDE_FILE(*crtend*.o) .ctors))
		KEEP(*(SORT(.ctors.*)))
		KEEP(*(.ctors))
	} >MAIN_REGION
	.dtors ALIGN(16): {
		KEEP(*crtbegin*.o(.dtors))
		KEEP(*(EXCLUDE_FILE(*crtend*.o) .dtors))
		KEEP(*(SORT(.dtors.*)))
		KEEP(*(.dtors))
	} >MAIN_REGION

	/* Static data.  */
	.rodata ALIGN(128): {
		*(.rodata)
		*(.rodata.*)
		*(.gnu.linkonce.r*)
	} >MAIN_REGION

	.data ALIGN(128): {
		_fdata = . ;
		*(.data)
		*(.data.*)
		*(.gnu.linkonce.d*)
		SORT(CONSTRUCTORS)
	} >MAIN_REGION

	.rdata ALIGN(128): { *(.rdata) } >MAIN_REGION
	.gcc_except_table ALIGN(128): { *(.gcc_except_table) } >MAIN_REGION

	_gp = ALIGN(128) + 0x7ff0;
	.lit4 ALIGN(128): { *(.lit4) } >MAIN_REGION
	.lit8 ALIGN(128): { *(.lit8) } >MAIN_REGION

	.sdata ALIGN(128): {
		*(.sdata)
		*(.sdata.*)
		*(.gnu.linkonce.s*)
	} >MAIN_REGION

	_edata = .;
	PROVIDE(edata = .);

	/* Uninitialized data.  */
	.sbss ALIGN(128) : {
		_fbss = . ;
		*(.sbss)
		*(.sbss.*)
		*(.gnu.linkonce.sb*)
		*(.scommon)
	} >MAIN_REGION

	.bss ALIGN(128) : {
		*(.bss)
		*(.bss.*)
		*(.gnu.linkonce.b*)
		*(COMMON)
	} >MAIN_REGION
	_end_bss = .;

	_end = .;
	end = _end;

	_heap_size = -1; /* automatically from _end to _stack */

	_stack = ORIGIN(stack);
	_stack_size = LENGTH(stack);
	_stack_end = _stack + _stack_size;
}
